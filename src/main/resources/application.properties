spring.profiles.active=rc
#报警记录保存一批的数据点个数,不能小于1，默认100
alarm.batch-save-size=100
#保存报警记录，不足一批时的数据点再缓存中的滞留时间（单位：毫秒），超过这一时间就会强制保存，不能小于1，默认5000
alarm.batch-retention-time=3000

#===============datasource=================
#spring.datasource.url = jdbc:mysql://192.168.0.30:3306/newcloud?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=GMT%2B8
#spring.datasource.username = test
#spring.datasource.password = tEsT123..
#spring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver

#===============druid=================
# datasource for mysql.one
spring.datasource.mysql.one.url = jdbc:mysql://192.168.0.30:3306/newcloud?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=GMT%2B8
spring.datasource.mysql.one.username = test
spring.datasource.mysql.one.password = tEsT123..
spring.datasource.mysql.one.driver-class-name = com.mysql.cj.jdbc.Driver
spring.datasource.mysql.one.initial-size=5
spring.datasource.mysql.one.max-active=20
spring.datasource.mysql.one.min-idle=5
spring.datasource.mysql.one.max-wait=60000
spring.datasource.mysql.one.pool-prepared-statements=true
spring.datasource.mysql.one.max-pool-prepared-statement-per-connection-size=20
spring.datasource.mysql.one.validation-query=SELECT 1 FROM DUAL
spring.datasource.mysql.one.validation-query-timeout=3
spring.datasource.mysql.one.test-on-borrow=true
spring.datasource.mysql.one.test-on-return=false
spring.datasource.mysql.one.test-while-idle=false
spring.datasource.mysql.one.time-between-eviction-runs-millis=60000
spring.datasource.mysql.one.min-evictable-idle-time-millis=300000
spring.datasource.mysql.one.max-evictable-idle-time-millis=600000
#spring.datasource.filters= stat,wall,log4j

# datasource for mysql.two
spring.datasource.mysql.two.url = jdbc:mysql://192.168.0.48:3306/newcloud?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=GMT%2B8
spring.datasource.mysql.two.username = root
spring.datasource.mysql.two.password = cloud123
spring.datasource.mysql.two.driver-class-name = com.mysql.cj.jdbc.Driver
spring.datasource.mysql.two.initial-size=2
spring.datasource.mysql.two.max-active=5
spring.datasource.mysql.two.min-idle=3
spring.datasource.mysql.two.max-wait=60000
spring.datasource.mysql.two.pool-prepared-statements=true
spring.datasource.mysql.two.max-pool-prepared-statement-per-connection-size=20
spring.datasource.mysql.two.validation-query=SELECT 1 FROM DUAL
spring.datasource.mysql.two.validation-query-timeout=3
spring.datasource.mysql.two.test-on-borrow=true
spring.datasource.mysql.two.test-on-return=false
spring.datasource.mysql.two.test-while-idle=false
spring.datasource.mysql.two.time-between-eviction-runs-millis=60000
spring.datasource.mysql.two.min-evictable-idle-time-millis=300000
spring.datasource.mysql.two.max-evictable-idle-time-millis=600000
#spring.datasource.filters= stat,wall,log4j

#===============Ignite=================
# datasource for Ignite
spring.ignite.jdbc-url=jdbc:ignite:thin://192.168.0.30:10800
spring.ignite.username=
spring.ignite.password=
spring.ignite.driver-class-name=org.apache.ignite.IgniteJdbcThinDriver

#===============MyBatis=================
#配置下划线映射到驼峰
mybatis.configuration.one.map-underscore-to-camel-case=true
mybatis.configuration.two.map-underscore-to-camel-case=true

#===============log=================
logging.config=classpath:logback-usr-cloud-alarm.xml
logging.level.root=info
logging.level.tk.mybatis.springboot.mapper=debug
logging.level.org.springframework.integration.gateway=debug
logging.level.cn.usr.cloud.alarm.mapper=debug

#===============RabbitMQ=================
spring.rabbitmq.host=192.168.0.48
spring.rabbitmq.port=5672
spring.rabbitmq.username=admin
spring.rabbitmq.password=admin

#===============influxDB=================
spring.influx.url=http://192.168.0.30:8086
spring.influx.user=
spring.influx.password=
spring.influx.database=ucloud

#===============Redis=================
spring.cache.type=redis
spring.cache.cache-names=user,person,lttl
spring.cache.redis.time-to-live=600000
spring.cache.redis.ttlMinutes=10

# Redis数据库索引（默认为0）
spring.redis.database=7
# Redis服务器地址
spring.redis.host=192.168.0.30
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=654321
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.jedis.pool.max-idle=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.jedis.pool.max-wait=-1
# 连接池中的最小空闲连接
spring.redis.jedis.pool.min-idlee=0
# 连接超时时间（毫秒）
spring.redis.timeout=1000

#===============Mqtt=================
mqttLink=tcp://192.168.0.30:1885

#===============Kafka=================
#-----内部kafka-----
###消费者配置###
spring.kafka.inside.bootstrap-servers=192.168.0.48:9092
#设置一个默认组
spring.kafka.inside.consumer.group-id=alarm-1
spring.kafka.inside.consumer.enable-auto-commit=true
# earliest:当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费
# latest:当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，消费新产生的该分区下的数据
# none:topic各分区都存在已提交的offset时，从offset后开始消费；只要有一个分区不存在已提交的offset，则抛出异常
spring.kafka.inside.consumer.auto-offset-reset=earliest
#如果'enable.auto.commit'为true，则消费者偏移自动提交给Kafka的频率（以毫秒为单位），默认值为5000。
spring.kafka.inside.consumer.auto-commit-interval=1000
#key-value序列化反序列化
#spring.kafka.inside.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.inside.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
###生产者配置###
#spring.kafka.inside.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.inside.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
#每次批量发送消息的数量
spring.kafka.inside.producer.batch-size=65536
spring.kafka.inside.producer.buffer-memory=524288

#-----外部kafka-----
spring.kafka.external.bootstrap-servers=192.168.0.48:9092
#设置一个默认组
spring.kafka.external.consumer.group-id=alarm-2
spring.kafka.external.consumer.enable-auto-commit=true
spring.kafka.external.consumer.auto-offset-reset=earliest
#如果'enable.auto.commit'为true，则消费者偏移自动提交给Kafka的频率（以毫秒为单位），默认值为5000。
spring.kafka.external.consumer.auto-commit-interval=1000
#key-value序列化反序列化
#spring.kafka.external.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.external.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
###生产者配置###
#spring.kafka.external.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.external.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
#每次批量发送消息的数量
spring.kafka.external.producer.batch-size=65536
spring.kafka.external.producer.buffer-memory=524288


